datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Transaction {
  id         Int      @id @default(autoincrement())
  clientId   String
  providerId String
  serviceId  String
  amount     Float
  status     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  client   User    @relation(name: "ClientTransactions", fields: [clientId], references: [cuid])
  provider User    @relation(name: "ProviderTransactions", fields: [providerId], references: [cuid])
  service  Service @relation(fields: [serviceId], references: [id])
}

model User {
  cuid                 String        @id @default(cuid())
  name                 String
  cpf                  String        @unique
  email                String        @unique
  password             String
  isAuth               Boolean       @default(false)
  social               String?
  avatar_url           String?
  site_link            String?
  location             Json          @default("{}")
  role                 Role
  services             Service[]
  clientTransactions   Transaction[] @relation(name: "ClientTransactions")
  providerTransactions Transaction[] @relation(name: "ProviderTransactions")

  Notification Notification[]
  Candidate Candidate[]
}

model Service {
  id          String   @id @default(cuid())
  providerId  String
  description String
  price       Float
  title       String
  category    String?
  status      Status
  images      String?  @db.Text
  location    Json?
  online      Boolean
  createdAt   DateTime @default(now())
  provider    User     @relation(fields: [providerId], references: [cuid])

  Transaction Transaction[]

  Candidate Candidate[]
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [cuid])
}

model Candidate {
  id         String          @id @default(cuid())
  status     CandidateStatus
  serviceId  String
  clientId   String          @unique
  clientName String
  client     User            @relation(fields: [clientId], references: [cuid])
  service    Service         @relation(fields: [serviceId], references: [id])
  createdAt  DateTime        @default(now())
}

enum Role {
  user
  admin
}

enum Status {
  pending
  inProgress
  completed
  excluded
}

enum CandidateStatus {
  pending
  accepted
  rejected
}
